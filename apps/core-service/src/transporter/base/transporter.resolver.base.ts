/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Transporter } from "./Transporter";
import { TransporterCountArgs } from "./TransporterCountArgs";
import { TransporterFindManyArgs } from "./TransporterFindManyArgs";
import { TransporterFindUniqueArgs } from "./TransporterFindUniqueArgs";
import { CreateTransporterArgs } from "./CreateTransporterArgs";
import { UpdateTransporterArgs } from "./UpdateTransporterArgs";
import { DeleteTransporterArgs } from "./DeleteTransporterArgs";
import { TransporterService } from "../transporter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Transporter)
export class TransporterResolverBase {
  constructor(
    protected readonly service: TransporterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Transporter",
    action: "read",
    possession: "any",
  })
  async _transportersMeta(
    @graphql.Args() args: TransporterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Transporter])
  @nestAccessControl.UseRoles({
    resource: "Transporter",
    action: "read",
    possession: "any",
  })
  async transporters(
    @graphql.Args() args: TransporterFindManyArgs
  ): Promise<Transporter[]> {
    return this.service.transporters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Transporter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Transporter",
    action: "read",
    possession: "own",
  })
  async transporter(
    @graphql.Args() args: TransporterFindUniqueArgs
  ): Promise<Transporter | null> {
    const result = await this.service.transporter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transporter)
  @nestAccessControl.UseRoles({
    resource: "Transporter",
    action: "create",
    possession: "any",
  })
  async createTransporter(
    @graphql.Args() args: CreateTransporterArgs
  ): Promise<Transporter> {
    return await this.service.createTransporter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transporter)
  @nestAccessControl.UseRoles({
    resource: "Transporter",
    action: "update",
    possession: "any",
  })
  async updateTransporter(
    @graphql.Args() args: UpdateTransporterArgs
  ): Promise<Transporter | null> {
    try {
      return await this.service.updateTransporter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transporter)
  @nestAccessControl.UseRoles({
    resource: "Transporter",
    action: "delete",
    possession: "any",
  })
  async deleteTransporter(
    @graphql.Args() args: DeleteTransporterArgs
  ): Promise<Transporter | null> {
    try {
      return await this.service.deleteTransporter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
